stages:
  - test
  - build
  - deploy

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

# Make quality report downloadable
code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

sast:
  variables:
    SAST_EXCLUDED_PATHS: test/**

# Lint js files.
lint-js:
 image: node
 stage: test
 tags:
   - docker
 script:
   - npm install -g eslint
   - eslint --ignore-pattern "**/*.min.js" $CI_PROJECT_DIR

# Performs unit testing.
unit-test:
  variables:
    MONGO_HOST: mongo:27017
  services:
    - mongo
  coverage: '/Statements\s*:\s*(\d+(?:\.\d+)?\%)/'
  image: registry.gitlab.com/gcsboss/docker-mocha-nyc:0.1.0-alpine
  stage: test
  artifacts:
    paths: [coverage]
  tags:
    - docker
  script:
    - npm i .
    - npm run-script coverage

# # Build and Push Docker image.
# build-image:
#   image: docker:19.03.1
#   stage: build
#   needs:
#     - lint-js
#     - unit-test
#   tags:
#     - docker
#   only:
#     - tags
#   except:
#     variables:
#       - $CI_COMMIT_TAG =~ /beta/
#   script:
#     - docker login -u gcsboss -p $HUB_PUSH_TOKEN
#     - docker build -t gcsboss/okaeri:$CI_COMMIT_REF_NAME .
#     - docker build -t gcsboss/okaeri:latest .
#     - docker push gcsboss/okaeri:$CI_COMMIT_REF_NAME
#     - docker push gcsboss/okaeri:latest

# Publish package to NPM.
publish:
  stage: deploy
  image: node
  tags:
    - docker
  only:
    - tags
    - triggers
  except:
    variables:
      - $CI_COMMIT_TAG =~ /beta/
  script:
    - npm install -g npm-cli-login
    - npm-cli-login
    - npm publish
